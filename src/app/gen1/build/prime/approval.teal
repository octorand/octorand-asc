#pragma version 8
intcblock 0 8 1 4 660757756 10000000
bytecblock 0x436f6e66696731 0xc9fd861dae22a7bad938ea83df1bee361d06ec08ab3ef9c74d87d5ad31e9f0af 0x436f6e66696732
txn NumAppArgs
intc_0 // 0
==
bnz main_l28
txna ApplicationArgs 0
pushbytes 0xbc525b0f // "initialize(uint64,asset,asset)void"
==
bnz main_l27
txna ApplicationArgs 0
pushbytes 0x092c7520 // "populate(uint64,uint64,uint64,uint64,uint64,uint64,byte[8],byte[64])void"
==
bnz main_l26
txna ApplicationArgs 0
pushbytes 0x9675e058 // "finalize(uint64,uint64,uint64,uint64,uint64)void"
==
bnz main_l25
txna ApplicationArgs 0
pushbytes 0x33ac8d6c // "upgrade()void"
==
bnz main_l24
txna ApplicationArgs 0
pushbytes 0x4a016bb2 // "list(uint64)void"
==
bnz main_l23
txna ApplicationArgs 0
pushbytes 0xbe12be50 // "unlist()void"
==
bnz main_l22
txna ApplicationArgs 0
pushbytes 0x48033a08 // "buy()void"
==
bnz main_l21
txna ApplicationArgs 0
pushbytes 0x5bff6c91 // "rename(uint64,uint64)void"
==
bnz main_l20
txna ApplicationArgs 0
pushbytes 0xac86822b // "repaint(uint64,uint64)void"
==
bnz main_l19
txna ApplicationArgs 0
pushbytes 0x5588dcb4 // "mint()void"
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0xb7355fd1 // "withdraw()void"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x7f19f9d4 // "optin(asset)void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x7ccbe726 // "optout(asset)void"
==
bnz main_l15
err
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub optoutcaster_43
intc_2 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub optincaster_42
intc_2 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub withdrawcaster_41
intc_2 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub mintcaster_40
intc_2 // 1
return
main_l19:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub repaintcaster_39
intc_2 // 1
return
main_l20:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub renamecaster_38
intc_2 // 1
return
main_l21:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub buycaster_37
intc_2 // 1
return
main_l22:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub unlistcaster_36
intc_2 // 1
return
main_l23:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub listcaster_35
intc_2 // 1
return
main_l24:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub upgradecaster_34
intc_2 // 1
return
main_l25:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub finalizecaster_33
intc_2 // 1
return
main_l26:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub populatecaster_32
intc_2 // 1
return
main_l27:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub initializecaster_31
intc_2 // 1
return
main_l28:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l32
txn OnCompletion
intc_3 // UpdateApplication
==
bnz main_l31
err
main_l31:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_17
intc_2 // 1
return
main_l32:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_16
intc_2 // 1
return

// init_global
initglobal_0:
proto 1 0
frame_dig -1
pushint 120 // 120
bzero
app_global_put
retsub

// get_global_bytes
getglobalbytes_1:
proto 3 1
frame_dig -3
app_global_get
frame_dig -2
frame_dig -1
extract3
retsub

// get_global_uint
getglobaluint_2:
proto 3 1
frame_dig -3
frame_dig -2
frame_dig -1
callsub getglobalbytes_1
btoi
retsub

// set_global_bytes
setglobalbytes_3:
proto 4 0
frame_dig -4
len
frame_dig -1
==
assert
frame_dig -3
frame_dig -3
intc_0 // 0
frame_dig -2
callsub getglobalbytes_1
frame_dig -4
concat
frame_dig -3
frame_dig -2
frame_dig -1
+
pushint 120 // 120
frame_dig -2
frame_dig -1
+
-
callsub getglobalbytes_1
concat
app_global_put
retsub

// set_global_uint
setglobaluint_4:
proto 4 0
frame_dig -4
frame_dig -1
callsub extractuint_5
frame_dig -3
frame_dig -2
frame_dig -1
callsub setglobalbytes_3
retsub

// extract_uint
extractuint_5:
proto 2 1
frame_dig -2
itob
intc_1 // 8
frame_dig -1
-
frame_dig -1
extract3
retsub

// optin_into_asset
optinintoasset_6:
proto 1 0
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -1
itxn_field XferAsset
intc_0 // 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// execute_payment
executepayment_7:
proto 2 0
itxn_begin
intc_2 // pay
itxn_field TypeEnum
frame_dig -2
itxn_field Receiver
frame_dig -1
itxn_field Amount
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// execute_asset_transfer
executeassettransfer_8:
proto 3 0
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -3
itxn_field XferAsset
frame_dig -2
itxn_field AssetReceiver
frame_dig -1
itxn_field AssetAmount
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// assert_sender_asset_holding
assertsenderassetholding_9:
proto 1 0
txn Sender
frame_dig -1
asset_holding_get AssetBalance
store 1
store 0
load 1
assert
load 0
intc_0 // 0
>
assert
retsub

// assert_sender_payment
assertsenderpayment_10:
proto 3 0
frame_dig -2
callsub assertispositiveint_14
frame_dig -1
gtxns Sender
txn Sender
==
assert
frame_dig -1
gtxns TypeEnum
intc_2 // pay
==
assert
frame_dig -1
gtxns Receiver
frame_dig -3
==
assert
frame_dig -1
gtxns Amount
frame_dig -2
==
assert
retsub

// assert_sender_asset_transfer
assertsenderassettransfer_11:
proto 4 0
frame_dig -2
callsub assertispositiveint_14
frame_dig -1
gtxns Sender
txn Sender
==
assert
frame_dig -1
gtxns TypeEnum
intc_3 // axfer
==
assert
frame_dig -1
gtxns XferAsset
frame_dig -4
==
assert
frame_dig -1
gtxns AssetReceiver
frame_dig -3
==
assert
frame_dig -1
gtxns AssetAmount
frame_dig -2
==
assert
retsub

// assert_is_equal
assertisequal_12:
proto 2 0
frame_dig -2
frame_dig -1
==
assert
retsub

// assert_is_not_equal
assertisnotequal_13:
proto 2 0
frame_dig -2
frame_dig -1
!=
assert
retsub

// assert_is_positive_int
assertispositiveint_14:
proto 1 0
frame_dig -1
intc_0 // 0
>
assert
retsub

// assert_is_positive_address
assertispositiveaddress_15:
proto 1 0
frame_dig -1
global ZeroAddress
!=
assert
retsub

// create
create_16:
proto 0 0
bytec_0 // "Config1"
callsub initglobal_0
bytec_2 // "Config2"
callsub initglobal_0
retsub

// update
update_17:
proto 0 0
txn Sender
global CreatorAddress
==
assert
retsub

// initialize
initialize_18:
proto 3 0
txn Sender
global CreatorAddress
==
assert
frame_dig -3
bytec_0 // "Config1"
intc_0 // 0
intc_1 // 8
callsub setglobaluint_4
frame_dig -2
txnas Assets
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub setglobaluint_4
frame_dig -1
txnas Assets
bytec_0 // "Config1"
pushint 16 // 16
intc_1 // 8
callsub setglobaluint_4
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub setglobalbytes_3
intc 4 // 660757756
callsub optinintoasset_6
frame_dig -2
txnas Assets
callsub optinintoasset_6
frame_dig -1
txnas Assets
callsub optinintoasset_6
retsub

// populate
populate_19:
proto 8 0
txn Sender
global CreatorAddress
==
assert
frame_dig -8
bytec_0 // "Config1"
pushint 32 // 32
pushint 2 // 2
callsub setglobaluint_4
frame_dig -7
bytec_0 // "Config1"
pushint 34 // 34
pushint 2 // 2
callsub setglobaluint_4
frame_dig -6
bytec_0 // "Config1"
pushint 36 // 36
intc_2 // 1
callsub setglobaluint_4
frame_dig -5
bytec_0 // "Config1"
pushint 37 // 37
intc_2 // 1
callsub setglobaluint_4
frame_dig -4
bytec_0 // "Config1"
pushint 38 // 38
intc_2 // 1
callsub setglobaluint_4
frame_dig -3
bytec_0 // "Config1"
pushint 39 // 39
intc_2 // 1
callsub setglobaluint_4
frame_dig -2
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub setglobalbytes_3
frame_dig -1
bytec_2 // "Config2"
intc_0 // 0
pushint 64 // 64
callsub setglobalbytes_3
retsub

// finalize
finalize_20:
proto 5 0
txn Sender
global CreatorAddress
==
assert
frame_dig -5
bytec_0 // "Config1"
pushint 40 // 40
intc_1 // 8
callsub setglobaluint_4
frame_dig -4
bytec_0 // "Config1"
pushint 48 // 48
intc_3 // 4
callsub setglobaluint_4
frame_dig -3
bytec_0 // "Config1"
pushint 52 // 52
intc_3 // 4
callsub setglobaluint_4
frame_dig -2
bytec_0 // "Config1"
pushint 56 // 56
intc_3 // 4
callsub setglobaluint_4
frame_dig -1
bytec_0 // "Config1"
pushint 60 // 60
intc_3 // 4
callsub setglobaluint_4
retsub

// upgrade
upgrade_21:
proto 0 0
bytec_0 // "Config1"
pushint 39 // 39
intc_2 // 1
callsub getglobaluint_2
intc_0 // 0
==
assert
bytec_0 // "Config1"
pushint 16 // 16
intc_1 // 8
callsub getglobaluint_2
global CurrentApplicationAddress
intc_2 // 1
txn GroupIndex
intc_2 // 1
+
callsub assertsenderassettransfer_11
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
txn Sender
intc_2 // 1
callsub executeassettransfer_8
intc_2 // 1
bytec_0 // "Config1"
pushint 39 // 39
intc_2 // 1
callsub setglobaluint_4
retsub

// list
list_22:
proto 1 0
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
global ZeroAddress
==
assert
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
intc_0 // 0
==
assert
frame_dig -1
callsub assertispositiveint_14
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
global CurrentApplicationAddress
intc_2 // 1
txn GroupIndex
intc_2 // 1
+
callsub assertsenderassettransfer_11
frame_dig -1
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
txn Sender
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub setglobalbytes_3
retsub

// unlist
unlist_23:
proto 0 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
callsub assertispositiveint_14
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
callsub assertispositiveaddress_15
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
txn Sender
callsub assertisequal_12
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
intc_2 // 1
callsub executeassettransfer_8
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub setglobalbytes_3
retsub

// buy
buy_24:
proto 0 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
callsub assertispositiveint_14
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
callsub assertispositiveaddress_15
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub getglobalbytes_1
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
pushint 90 // 90
*
pushint 100 // 100
/
txn GroupIndex
intc_2 // 1
+
callsub assertsenderpayment_10
bytec_1 // ZH6YMHNOEKT3VWJY5KB56G7OGYOQN3AIVM7PTR2NQ7K22MPJ6CXRUAIIAM
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
pushint 10 // 10
*
pushint 100 // 100
/
txn GroupIndex
pushint 2 // 2
+
callsub assertsenderpayment_10
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
txn Sender
intc_2 // 1
callsub executeassettransfer_8
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
pushint 32 // 32
callsub setglobalbytes_3
bytec_0 // "Config1"
pushint 48 // 48
intc_3 // 4
callsub getglobaluint_2
intc_2 // 1
+
bytec_0 // "Config1"
pushint 48 // 48
intc_3 // 4
callsub setglobaluint_4
retsub

// rename
rename_25:
proto 2 0
frame_dig -2
pushint 7 // 7
<=
assert
frame_dig -1
pushint 65 // 65
>=
assert
frame_dig -1
pushint 90 // 90
<=
assert
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertsenderassetholding_9
intc 4 // 660757756
bytec_1 // ZH6YMHNOEKT3VWJY5KB56G7OGYOQN3AIVM7PTR2NQ7K22MPJ6CXRUAIIAM
intc 5 // 10000000
frame_dig -1
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub getglobalbytes_1
frame_dig -2
getbyte
>
bnz rename_25_l2
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub getglobalbytes_1
frame_dig -2
getbyte
frame_dig -1
-
b rename_25_l3
rename_25_l2:
frame_dig -1
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub getglobalbytes_1
frame_dig -2
getbyte
-
rename_25_l3:
*
txn GroupIndex
intc_2 // 1
+
callsub assertsenderassettransfer_11
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub getglobalbytes_1
frame_dig -2
frame_dig -1
setbyte
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub setglobalbytes_3
bytec_0 // "Config1"
pushint 56 // 56
intc_3 // 4
callsub getglobaluint_2
intc_2 // 1
+
bytec_0 // "Config1"
pushint 56 // 56
intc_3 // 4
callsub setglobaluint_4
retsub

// repaint
repaint_26:
proto 2 0
frame_dig -2
pushint 7 // 7
<=
assert
frame_dig -1
pushint 7 // 7
<=
assert
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertsenderassetholding_9
intc 4 // 660757756
bytec_1 // ZH6YMHNOEKT3VWJY5KB56G7OGYOQN3AIVM7PTR2NQ7K22MPJ6CXRUAIIAM
intc 5 // 10000000
txn GroupIndex
intc_2 // 1
+
callsub assertsenderassettransfer_11
frame_dig -2
bytec_0 // "Config1"
pushint 32 // 32
pushint 2 // 2
callsub setglobaluint_4
frame_dig -1
bytec_0 // "Config1"
pushint 34 // 34
pushint 2 // 2
callsub setglobaluint_4
bytec_0 // "Config1"
pushint 60 // 60
intc_3 // 4
callsub getglobaluint_2
intc_2 // 1
+
bytec_0 // "Config1"
pushint 60 // 60
intc_3 // 4
callsub setglobaluint_4
retsub

// mint
mint_27:
proto 0 0
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertsenderassetholding_9
global CurrentApplicationAddress
intc 4 // 660757756
asset_holding_get AssetBalance
store 3
store 2
load 3
assert
load 2
intc_0 // 0
>
assert
intc 4 // 660757756
txn Sender
load 2
callsub executeassettransfer_8
bytec_0 // "Config1"
pushint 52 // 52
intc_3 // 4
callsub getglobaluint_2
intc_2 // 1
+
bytec_0 // "Config1"
pushint 52 // 52
intc_3 // 4
callsub setglobaluint_4
retsub

// withdraw
withdraw_28:
proto 0 0
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertsenderassetholding_9
global CurrentApplicationAddress
balance
global CurrentApplicationAddress
min_balance
-
callsub assertispositiveint_14
txn Sender
global CurrentApplicationAddress
balance
global CurrentApplicationAddress
min_balance
-
callsub executepayment_7
retsub

// optin
optin_29:
proto 1 0
frame_dig -1
txnas Assets
intc 4 // 660757756
callsub assertisnotequal_13
frame_dig -1
txnas Assets
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertisnotequal_13
frame_dig -1
txnas Assets
bytec_0 // "Config1"
pushint 16 // 16
intc_1 // 8
callsub getglobaluint_2
callsub assertisnotequal_13
global CurrentApplicationAddress
pushint 100000 // 100000
txn GroupIndex
intc_2 // 1
+
callsub assertsenderpayment_10
frame_dig -1
txnas Assets
callsub optinintoasset_6
retsub

// optout
optout_30:
proto 1 0
frame_dig -1
txnas Assets
intc 4 // 660757756
callsub assertisnotequal_13
frame_dig -1
txnas Assets
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertisnotequal_13
frame_dig -1
txnas Assets
bytec_0 // "Config1"
pushint 16 // 16
intc_1 // 8
callsub getglobaluint_2
callsub assertisnotequal_13
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
callsub assertsenderassetholding_9
global CurrentApplicationAddress
frame_dig -1
txnas Assets
asset_holding_get AssetBalance
store 5
store 4
load 5
assert
load 4
intc_0 // 0
>
assert
frame_dig -1
txnas Assets
txn Sender
load 4
callsub executeassettransfer_8
retsub

// initialize_caster
initializecaster_31:
proto 0 0
intc_0 // 0
dupn 2
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 1
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 2
frame_dig 0
frame_dig 1
frame_dig 2
callsub initialize_18
retsub

// populate_caster
populatecaster_32:
proto 0 0
intc_0 // 0
dupn 5
pushbytes 0x // ""
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
btoi
frame_bury 2
txna ApplicationArgs 4
btoi
frame_bury 3
txna ApplicationArgs 5
btoi
frame_bury 4
txna ApplicationArgs 6
btoi
frame_bury 5
txna ApplicationArgs 7
frame_bury 6
txna ApplicationArgs 8
frame_bury 7
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
frame_dig 7
callsub populate_19
retsub

// finalize_caster
finalizecaster_33:
proto 0 0
intc_0 // 0
dupn 4
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
btoi
frame_bury 2
txna ApplicationArgs 4
btoi
frame_bury 3
txna ApplicationArgs 5
btoi
frame_bury 4
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub finalize_20
retsub

// upgrade_caster
upgradecaster_34:
proto 0 0
callsub upgrade_21
retsub

// list_caster
listcaster_35:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
btoi
frame_bury 0
frame_dig 0
callsub list_22
retsub

// unlist_caster
unlistcaster_36:
proto 0 0
callsub unlist_23
retsub

// buy_caster
buycaster_37:
proto 0 0
callsub buy_24
retsub

// rename_caster
renamecaster_38:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
frame_dig 0
frame_dig 1
callsub rename_25
retsub

// repaint_caster
repaintcaster_39:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
frame_dig 0
frame_dig 1
callsub repaint_26
retsub

// mint_caster
mintcaster_40:
proto 0 0
callsub mint_27
retsub

// withdraw_caster
withdrawcaster_41:
proto 0 0
callsub withdraw_28
retsub

// optin_caster
optincaster_42:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub optin_29
retsub

// optout_caster
optoutcaster_43:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub optout_30
retsub