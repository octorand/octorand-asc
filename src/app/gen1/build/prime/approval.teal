#pragma version 8
intcblock 0 8 1 32
bytecblock 0x436f6e66696731 0x
txn NumAppArgs
intc_0 // 0
==
bnz main_l18
txna ApplicationArgs 0
pushbytes 0x58b333da // "initialize(uint64,uint64,asset,asset,asset)void"
==
bnz main_l17
txna ApplicationArgs 0
pushbytes 0x72841d7a // "populate(uint64,uint64,uint64,uint64,uint64,uint64,byte[8])void"
==
bnz main_l16
txna ApplicationArgs 0
pushbytes 0x893c0cb4 // "finalize(uint64,uint64,uint64,uint64)void"
==
bnz main_l15
txna ApplicationArgs 0
pushbytes 0x17086eab // "rename(byte[8])void"
==
bnz main_l14
txna ApplicationArgs 0
pushbytes 0xac86822b // "repaint(uint64,uint64)void"
==
bnz main_l13
txna ApplicationArgs 0
pushbytes 0x0c39465f // "list(uint64,account)void"
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0xbe12be50 // "unlist()void"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x5ed34682 // "buy(account)void"
==
bnz main_l10
err
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub buycaster_32
intc_2 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub unlistcaster_31
intc_2 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub listcaster_30
intc_2 // 1
return
main_l13:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub repaintcaster_29
intc_2 // 1
return
main_l14:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub renamecaster_28
intc_2 // 1
return
main_l15:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub finalizecaster_27
intc_2 // 1
return
main_l16:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub populatecaster_26
intc_2 // 1
return
main_l17:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub initializecaster_25
intc_2 // 1
return
main_l18:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l22
txn OnCompletion
pushint 4 // UpdateApplication
==
bnz main_l21
err
main_l21:
txn ApplicationID
intc_0 // 0
!=
assert
callsub update_16
intc_2 // 1
return
main_l22:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_15
intc_2 // 1
return

// init_global
initglobal_0:
proto 1 0
frame_dig -1
pushint 120 // 120
bzero
app_global_put
retsub

// get_global_bytes
getglobalbytes_1:
proto 3 1
frame_dig -3
app_global_get
frame_dig -2
frame_dig -1
extract3
retsub

// get_global_uint
getglobaluint_2:
proto 3 1
frame_dig -3
frame_dig -2
frame_dig -1
callsub getglobalbytes_1
btoi
retsub

// set_global_bytes
setglobalbytes_3:
proto 4 0
frame_dig -4
frame_dig -1
callsub assertisvalidlength_14
frame_dig -3
frame_dig -3
intc_0 // 0
frame_dig -2
callsub getglobalbytes_1
frame_dig -4
concat
frame_dig -3
frame_dig -2
frame_dig -1
+
pushint 120 // 120
frame_dig -2
frame_dig -1
+
-
callsub getglobalbytes_1
concat
app_global_put
retsub

// set_global_uint
setglobaluint_4:
proto 4 0
frame_dig -4
frame_dig -1
callsub extractuint_5
frame_dig -3
frame_dig -2
frame_dig -1
callsub setglobalbytes_3
retsub

// extract_uint
extractuint_5:
proto 2 1
frame_dig -2
itob
intc_1 // 8
frame_dig -1
-
frame_dig -1
extract3
retsub

// optin_into_asset
optinintoasset_6:
proto 1 0
frame_dig -1
intc_0 // 0
>
bz optinintoasset_6_l2
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig -1
itxn_field XferAsset
intc_0 // 0
itxn_field AssetAmount
global CurrentApplicationAddress
itxn_field AssetReceiver
intc_0 // 0
itxn_field Fee
itxn_submit
optinintoasset_6_l2:
retsub

// execute_asset_transfer
executeassettransfer_7:
proto 3 0
itxn_begin
pushint 4 // axfer
itxn_field TypeEnum
frame_dig -3
itxn_field XferAsset
frame_dig -2
itxn_field AssetReceiver
frame_dig -1
itxn_field AssetAmount
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// assert_is_equal
assertisequal_8:
proto 2 0
frame_dig -2
frame_dig -1
==
assert
retsub

// assert_is_positive_int
assertispositiveint_9:
proto 1 0
frame_dig -1
intc_0 // 0
>
assert
retsub

// assert_is_positive_address
assertispositiveaddress_10:
proto 1 0
frame_dig -1
global ZeroAddress
!=
assert
retsub

// assert_is_creator
assertiscreator_11:
proto 0 0
txn Sender
global CreatorAddress
callsub assertisequal_8
retsub

// assert_is_zero_int
assertiszeroint_12:
proto 1 0
frame_dig -1
intc_0 // 0
callsub assertisequal_8
retsub

// assert_is_zero_address
assertiszeroaddress_13:
proto 1 0
frame_dig -1
global ZeroAddress
callsub assertisequal_8
retsub

// assert_is_valid_length
assertisvalidlength_14:
proto 2 0
frame_dig -2
len
frame_dig -1
callsub assertisequal_8
retsub

// create
create_15:
proto 0 0
bytec_0 // "Config1"
callsub initglobal_0
pushbytes 0x436f6e66696732 // "Config2"
callsub initglobal_0
retsub

// update
update_16:
proto 0 0
callsub assertiscreator_11
retsub

// initialize
initialize_17:
proto 5 0
callsub assertiscreator_11
frame_dig -1
txnas Assets
pushint 660757756 // 660757756
callsub assertisequal_8
frame_dig -5
bytec_0 // "Config1"
intc_0 // 0
pushint 4 // 4
callsub setglobaluint_4
frame_dig -4
bytec_0 // "Config1"
pushint 4 // 4
pushint 4 // 4
callsub setglobaluint_4
frame_dig -3
txnas Assets
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub setglobaluint_4
frame_dig -2
txnas Assets
bytec_0 // "Config1"
pushint 16 // 16
intc_1 // 8
callsub setglobaluint_4
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub setglobalbytes_3
frame_dig -1
txnas Assets
callsub optinintoasset_6
frame_dig -3
txnas Assets
callsub optinintoasset_6
frame_dig -2
txnas Assets
callsub optinintoasset_6
retsub

// populate
populate_18:
proto 7 0
callsub assertiscreator_11
frame_dig -7
bytec_0 // "Config1"
pushint 24 // 24
pushint 2 // 2
callsub setglobaluint_4
frame_dig -6
bytec_0 // "Config1"
pushint 26 // 26
pushint 2 // 2
callsub setglobaluint_4
frame_dig -5
bytec_0 // "Config1"
pushint 28 // 28
intc_2 // 1
callsub setglobaluint_4
frame_dig -4
bytec_0 // "Config1"
pushint 29 // 29
intc_2 // 1
callsub setglobaluint_4
frame_dig -3
bytec_0 // "Config1"
pushint 30 // 30
intc_2 // 1
callsub setglobaluint_4
frame_dig -2
bytec_0 // "Config1"
pushint 31 // 31
intc_2 // 1
callsub setglobaluint_4
frame_dig -1
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub setglobalbytes_3
retsub

// finalize
finalize_19:
proto 4 0
callsub assertiscreator_11
frame_dig -4
bytec_0 // "Config1"
intc_3 // 32
intc_1 // 8
callsub setglobaluint_4
frame_dig -3
bytec_0 // "Config1"
pushint 40 // 40
intc_1 // 8
callsub setglobaluint_4
frame_dig -2
bytec_0 // "Config1"
pushint 48 // 48
intc_1 // 8
callsub setglobaluint_4
frame_dig -1
bytec_0 // "Config1"
pushint 56 // 56
intc_1 // 8
callsub setglobaluint_4
retsub

// rename
rename_20:
proto 1 0
frame_dig -1
bytec_0 // "Config1"
pushint 104 // 104
intc_1 // 8
callsub setglobalbytes_3
retsub

// repaint
repaint_21:
proto 2 0
frame_dig -2
bytec_0 // "Config1"
pushint 24 // 24
pushint 2 // 2
callsub setglobaluint_4
frame_dig -1
bytec_0 // "Config1"
pushint 26 // 26
pushint 2 // 2
callsub setglobaluint_4
retsub

// list
list_22:
proto 2 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
callsub assertiszeroint_12
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub getglobalbytes_1
callsub assertiszeroaddress_13
frame_dig -2
callsub assertispositiveint_9
frame_dig -1
txnas Accounts
callsub assertispositiveaddress_10
frame_dig -2
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
frame_dig -1
txnas Accounts
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub setglobalbytes_3
retsub

// unlist
unlist_23:
proto 0 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
callsub assertispositiveint_9
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub getglobalbytes_1
callsub assertispositiveaddress_10
bytec_0 // "Config1"
intc_1 // 8
intc_1 // 8
callsub getglobaluint_2
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub getglobalbytes_1
intc_2 // 1
callsub executeassettransfer_7
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub setglobalbytes_3
retsub

// buy
buy_24:
proto 1 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub getglobaluint_2
callsub assertispositiveint_9
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub getglobalbytes_1
callsub assertispositiveaddress_10
intc_0 // 0
bytec_0 // "Config1"
pushint 64 // 64
intc_1 // 8
callsub setglobaluint_4
global ZeroAddress
bytec_0 // "Config1"
pushint 72 // 72
intc_3 // 32
callsub setglobalbytes_3
retsub

// initialize_caster
initializecaster_25:
proto 0 0
intc_0 // 0
dupn 4
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
intc_0 // 0
getbyte
frame_bury 2
txna ApplicationArgs 4
intc_0 // 0
getbyte
frame_bury 3
txna ApplicationArgs 5
intc_0 // 0
getbyte
frame_bury 4
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
callsub initialize_17
retsub

// populate_caster
populatecaster_26:
proto 0 0
intc_0 // 0
dupn 5
bytec_1 // ""
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
btoi
frame_bury 2
txna ApplicationArgs 4
btoi
frame_bury 3
txna ApplicationArgs 5
btoi
frame_bury 4
txna ApplicationArgs 6
btoi
frame_bury 5
txna ApplicationArgs 7
frame_bury 6
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
frame_dig 4
frame_dig 5
frame_dig 6
callsub populate_18
retsub

// finalize_caster
finalizecaster_27:
proto 0 0
intc_0 // 0
dupn 3
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
txna ApplicationArgs 3
btoi
frame_bury 2
txna ApplicationArgs 4
btoi
frame_bury 3
frame_dig 0
frame_dig 1
frame_dig 2
frame_dig 3
callsub finalize_19
retsub

// rename_caster
renamecaster_28:
proto 0 0
bytec_1 // ""
txna ApplicationArgs 1
frame_bury 0
frame_dig 0
callsub rename_20
retsub

// repaint_caster
repaintcaster_29:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
btoi
frame_bury 1
frame_dig 0
frame_dig 1
callsub repaint_21
retsub

// list_caster
listcaster_30:
proto 0 0
intc_0 // 0
dup
txna ApplicationArgs 1
btoi
frame_bury 0
txna ApplicationArgs 2
intc_0 // 0
getbyte
frame_bury 1
frame_dig 0
frame_dig 1
callsub list_22
retsub

// unlist_caster
unlistcaster_31:
proto 0 0
callsub unlist_23
retsub

// buy_caster
buycaster_32:
proto 0 0
intc_0 // 0
txna ApplicationArgs 1
intc_0 // 0
getbyte
frame_bury 0
frame_dig 0
callsub buy_24
retsub